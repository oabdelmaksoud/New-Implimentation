syntax = "proto3";

package agentic.control;

service ControlPlane {
  // Task Management
  rpc SubmitTask (TaskRequest) returns (TaskResponse);
  rpc CancelTask (TaskId) returns (OperationResponse);
  rpc GetTaskStatus (TaskId) returns (TaskStatus);
  rpc ListTasks (TaskFilter) returns (stream TaskStatus);

  // System Control
  rpc PauseSystem (Empty) returns (OperationResponse);
  rpc ResumeSystem (Empty) returns (OperationResponse);
  rpc GetSystemStatus (Empty) returns (SystemStatus);
  rpc UpdateConfig (ConfigUpdate) returns (OperationResponse);

  // Monitoring
  rpc GetMetrics (MetricRequest) returns (stream MetricData);
  rpc GetLogs (LogRequest) returns (stream LogEntry);
}

message TaskRequest {
  string id = 1;
  string type = 2;
  bytes payload = 3;
  int32 priority = 4;
  int64 timeout_ms = 5;
}

message TaskResponse {
  string id = 1;
  Status status = 2;
  string message = 3;
}

message TaskId {
  string id = 1;
}

message TaskStatus {
  string id = 1;
  Status status = 2;
  int64 created_at = 3;
  int64 updated_at = 4;
  string worker_id = 5;
  optional bytes result = 6;
  optional string error = 7;
}

message TaskFilter {
  repeated string types = 1;
  repeated Status statuses = 2;
  int64 since = 3;
  int32 limit = 4;
}

message OperationResponse {
  bool success = 1;
  string message = 2;
}

message SystemStatus {
  bool is_running = 1;
  int32 active_tasks = 2;
  int32 queued_tasks = 3;
  map<string, string> stats = 4;
}

message ConfigUpdate {
  map<string, string> changes = 1;
}

message MetricRequest {
  repeated string names = 1;
  int64 duration_ms = 2;
}

message MetricData {
  string name = 1;
  map<string, double> values = 2;
  int64 timestamp = 3;
}

message LogRequest {
  string level = 1;
  string source = 2;
  int64 since = 3;
  int32 limit = 4;
}

message LogEntry {
  int64 timestamp = 1;
  string level = 2;
  string source = 3;
  string message = 4;
}

message Empty {}

enum Status {
  PENDING = 0;
  PROCESSING = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELLED = 4;
  RETRYING = 5;
}
