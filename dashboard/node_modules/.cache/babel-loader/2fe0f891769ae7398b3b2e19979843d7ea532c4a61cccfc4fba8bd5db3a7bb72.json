{"ast":null,"code":"const servers = new Map();\nexport const registerServer = server => {\n  servers.set(server.name, {\n    name: server.name,\n    url: server.url,\n    description: server.description,\n    version: server.version,\n    lastSeen: Date.now()\n  });\n};\nexport const unregisterServer = serverName => {\n  servers.delete(serverName);\n};\nexport const getMcpServers = () => {\n  return Array.from(servers.values());\n};\nexport const getServer = serverName => {\n  return servers.get(serverName);\n};\n\n// Auto-register known MCP servers\nregisterServer({\n  name: 'TaskQueue',\n  url: 'http://localhost:3001',\n  description: 'Task queue management',\n  version: '1.0.0'\n});\nregisterServer({\n  name: 'DatabaseConnector',\n  url: 'http://localhost:3002',\n  description: 'Database access layer',\n  version: '1.0.0'\n});\nregisterServer({\n  name: 'APIGateway',\n  url: 'http://localhost:3003',\n  description: 'API gateway service',\n  version: '1.0.0'\n});\nregisterServer({\n  name: 'Monitoring',\n  url: 'http://localhost:3004',\n  description: 'Monitoring and analytics',\n  version: '1.0.0'\n});\nregisterServer({\n  name: 'GitHubIntegration',\n  url: 'http://localhost:3005',\n  description: 'GitHub API integration',\n  version: '1.0.0'\n});\nexport const getServerStatus = async serverName => {\n  const server = servers.get(serverName);\n  if (!server) return {\n    status: 'not_found'\n  };\n  try {\n    const response = await fetch(`${server.url}/health`);\n    if (!response.ok) throw new Error('Health check failed');\n    const data = await response.json();\n    return {\n      status: 'healthy',\n      details: data,\n      lastChecked: new Date().toISOString()\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      error: error.message,\n      lastChecked: new Date().toISOString()\n    };\n  }\n};","map":{"version":3,"names":["servers","Map","registerServer","server","set","name","url","description","version","lastSeen","Date","now","unregisterServer","serverName","delete","getMcpServers","Array","from","values","getServer","get","getServerStatus","status","response","fetch","ok","Error","data","json","details","lastChecked","toISOString","error","message"],"sources":["/Users/omarabdelmaksoud/Documents/GitHub/New Implimentation/dashboard/src/services/serverRegistry.js"],"sourcesContent":["const servers = new Map();\n\nexport const registerServer = (server) => {\n  servers.set(server.name, {\n    name: server.name,\n    url: server.url,\n    description: server.description,\n    version: server.version,\n    lastSeen: Date.now()\n  });\n};\n\nexport const unregisterServer = (serverName) => {\n  servers.delete(serverName);\n};\n\nexport const getMcpServers = () => {\n  return Array.from(servers.values());\n};\n\nexport const getServer = (serverName) => {\n  return servers.get(serverName);\n};\n\n// Auto-register known MCP servers\nregisterServer({\n  name: 'TaskQueue',\n  url: 'http://localhost:3001',\n  description: 'Task queue management',\n  version: '1.0.0'\n});\n\nregisterServer({\n  name: 'DatabaseConnector',\n  url: 'http://localhost:3002',\n  description: 'Database access layer',\n  version: '1.0.0'\n});\n\nregisterServer({\n  name: 'APIGateway',\n  url: 'http://localhost:3003',\n  description: 'API gateway service',\n  version: '1.0.0'\n});\n\nregisterServer({\n  name: 'Monitoring',\n  url: 'http://localhost:3004',\n  description: 'Monitoring and analytics',\n  version: '1.0.0'\n});\n\nregisterServer({\n  name: 'GitHubIntegration',\n  url: 'http://localhost:3005',\n  description: 'GitHub API integration',\n  version: '1.0.0'\n});\n\nexport const getServerStatus = async (serverName) => {\n  const server = servers.get(serverName);\n  if (!server) return { status: 'not_found' };\n\n  try {\n    const response = await fetch(`${server.url}/health`);\n    if (!response.ok) throw new Error('Health check failed');\n    const data = await response.json();\n    return { \n      status: 'healthy',\n      details: data,\n      lastChecked: new Date().toISOString()\n    };\n  } catch (error) {\n    return { \n      status: 'unhealthy',\n      error: error.message,\n      lastChecked: new Date().toISOString()\n    };\n  }\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;AAEzB,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxCH,OAAO,CAACI,GAAG,CAACD,MAAM,CAACE,IAAI,EAAE;IACvBA,IAAI,EAAEF,MAAM,CAACE,IAAI;IACjBC,GAAG,EAAEH,MAAM,CAACG,GAAG;IACfC,WAAW,EAAEJ,MAAM,CAACI,WAAW;IAC/BC,OAAO,EAAEL,MAAM,CAACK,OAAO;IACvBC,QAAQ,EAAEC,IAAI,CAACC,GAAG,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;EAC9Cb,OAAO,CAACc,MAAM,CAACD,UAAU,CAAC;AAC5B,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAM;EACjC,OAAOC,KAAK,CAACC,IAAI,CAACjB,OAAO,CAACkB,MAAM,CAAC,CAAC,CAAC;AACrC,CAAC;AAED,OAAO,MAAMC,SAAS,GAAIN,UAAU,IAAK;EACvC,OAAOb,OAAO,CAACoB,GAAG,CAACP,UAAU,CAAC;AAChC,CAAC;;AAED;AACAX,cAAc,CAAC;EACbG,IAAI,EAAE,WAAW;EACjBC,GAAG,EAAE,uBAAuB;EAC5BC,WAAW,EAAE,uBAAuB;EACpCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFN,cAAc,CAAC;EACbG,IAAI,EAAE,mBAAmB;EACzBC,GAAG,EAAE,uBAAuB;EAC5BC,WAAW,EAAE,uBAAuB;EACpCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFN,cAAc,CAAC;EACbG,IAAI,EAAE,YAAY;EAClBC,GAAG,EAAE,uBAAuB;EAC5BC,WAAW,EAAE,qBAAqB;EAClCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFN,cAAc,CAAC;EACbG,IAAI,EAAE,YAAY;EAClBC,GAAG,EAAE,uBAAuB;EAC5BC,WAAW,EAAE,0BAA0B;EACvCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFN,cAAc,CAAC;EACbG,IAAI,EAAE,mBAAmB;EACzBC,GAAG,EAAE,uBAAuB;EAC5BC,WAAW,EAAE,wBAAwB;EACrCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMa,eAAe,GAAG,MAAOR,UAAU,IAAK;EACnD,MAAMV,MAAM,GAAGH,OAAO,CAACoB,GAAG,CAACP,UAAU,CAAC;EACtC,IAAI,CAACV,MAAM,EAAE,OAAO;IAAEmB,MAAM,EAAE;EAAY,CAAC;EAE3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,MAAM,CAACG,GAAG,SAAS,CAAC;IACpD,IAAI,CAACiB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAO;MACLN,MAAM,EAAE,SAAS;MACjBO,OAAO,EAAEF,IAAI;MACbG,WAAW,EAAE,IAAIpB,IAAI,CAAC,CAAC,CAACqB,WAAW,CAAC;IACtC,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO;MACLV,MAAM,EAAE,WAAW;MACnBU,KAAK,EAAEA,KAAK,CAACC,OAAO;MACpBH,WAAW,EAAE,IAAIpB,IAAI,CAAC,CAAC,CAACqB,WAAW,CAAC;IACtC,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}